/*
 * generated by Xtext 2.25.0
 */
package org.example.domainmodel.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.example.domainmodel.ide.contentassist.antlr.internal.InternalDomainmodelParser;
import org.example.domainmodel.services.DomainmodelGrammarAccess;

public class DomainmodelParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DomainmodelGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DomainmodelGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getShipAccess().getGroup(), "rule__Ship__Group__0");
			builder.put(grammarAccess.getShipAccess().getGroup_2(), "rule__Ship__Group_2__0");
			builder.put(grammarAccess.getModelAccess().getDeclarationsAssignment(), "rule__Model__DeclarationsAssignment");
			builder.put(grammarAccess.getShipAccess().getConditionsAssignment_1(), "rule__Ship__ConditionsAssignment_1");
			builder.put(grammarAccess.getShipAccess().getConditionsAssignment_2_1(), "rule__Ship__ConditionsAssignment_2_1");
			builder.put(grammarAccess.getShipAccess().getActionAssignment_4(), "rule__Ship__ActionAssignment_4");
			builder.put(grammarAccess.getShipAccess().getActionAssignment_5(), "rule__Ship__ActionAssignment_5");
			builder.put(grammarAccess.getShipAccess().getAddressAssignment_7(), "rule__Ship__AddressAssignment_7");
			builder.put(grammarAccess.getItemAccess().getNameAssignment(), "rule__Item__NameAssignment");
			builder.put(grammarAccess.getAddressAccess().getNameAssignment(), "rule__Address__NameAssignment");
			builder.put(grammarAccess.getConditionAccess().getNameAssignment(), "rule__Condition__NameAssignment");
			builder.put(grammarAccess.getActionAccess().getNameAssignment(), "rule__Action__NameAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DomainmodelGrammarAccess grammarAccess;

	@Override
	protected InternalDomainmodelParser createParser() {
		InternalDomainmodelParser result = new InternalDomainmodelParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DomainmodelGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DomainmodelGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
