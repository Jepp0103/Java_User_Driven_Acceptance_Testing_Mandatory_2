/*
 * generated by Xtext 2.25.0
 */
grammar InternalDomainmodel;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.example.domainmodel.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.example.domainmodel.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.example.domainmodel.services.DomainmodelGrammarAccess;

}
@parser::members {
	private DomainmodelGrammarAccess grammarAccess;

	public void setGrammarAccess(DomainmodelGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getDeclarationsAssignment()); }
		(rule__Model__DeclarationsAssignment)*
		{ after(grammarAccess.getModelAccess().getDeclarationsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeclaration
entryRuleDeclaration
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclarationAccess().getShipParserRuleCall()); }
		ruleShip
		{ after(grammarAccess.getDeclarationAccess().getShipParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShip
entryRuleShip
:
{ before(grammarAccess.getShipRule()); }
	 ruleShip
{ after(grammarAccess.getShipRule()); } 
	 EOF 
;

// Rule Ship
ruleShip 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShipAccess().getGroup()); }
		(rule__Ship__Group__0)
		{ after(grammarAccess.getShipAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleItem
entryRuleItem
:
{ before(grammarAccess.getItemRule()); }
	 ruleItem
{ after(grammarAccess.getItemRule()); } 
	 EOF 
;

// Rule Item
ruleItem 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getItemAccess().getNameAssignment()); }
		(rule__Item__NameAssignment)
		{ after(grammarAccess.getItemAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddress
entryRuleAddress
:
{ before(grammarAccess.getAddressRule()); }
	 ruleAddress
{ after(grammarAccess.getAddressRule()); } 
	 EOF 
;

// Rule Address
ruleAddress 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAddressAccess().getNameAssignment()); }
		(rule__Address__NameAssignment)
		{ after(grammarAccess.getAddressAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondition
entryRuleCondition
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionAccess().getNameAssignment()); }
		(rule__Condition__NameAssignment)
		{ after(grammarAccess.getConditionAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAction
entryRuleAction
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionAccess().getNameAssignment()); }
		(rule__Action__NameAssignment)
		{ after(grammarAccess.getActionAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ship__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ship__Group__0__Impl
	rule__Ship__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ship__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShipAccess().getGivenKeyword_0()); }
	'Given'
	{ after(grammarAccess.getShipAccess().getGivenKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ship__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ship__Group__1__Impl
	rule__Ship__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Ship__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShipAccess().getConditionsAssignment_1()); }
	(rule__Ship__ConditionsAssignment_1)
	{ after(grammarAccess.getShipAccess().getConditionsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ship__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ship__Group__2__Impl
	rule__Ship__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Ship__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShipAccess().getGroup_2()); }
	(rule__Ship__Group_2__0)*
	{ after(grammarAccess.getShipAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ship__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ship__Group__3__Impl
	rule__Ship__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Ship__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShipAccess().getWhenKeyword_3()); }
	' when '
	{ after(grammarAccess.getShipAccess().getWhenKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ship__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ship__Group__4__Impl
	rule__Ship__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Ship__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShipAccess().getActionAssignment_4()); }
	(rule__Ship__ActionAssignment_4)
	{ after(grammarAccess.getShipAccess().getActionAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ship__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ship__Group__5__Impl
	rule__Ship__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Ship__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShipAccess().getActionAssignment_5()); }
	(rule__Ship__ActionAssignment_5)
	{ after(grammarAccess.getShipAccess().getActionAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ship__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ship__Group__6__Impl
	rule__Ship__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Ship__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShipAccess().getToKeyword_6()); }
	' to '
	{ after(grammarAccess.getShipAccess().getToKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ship__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ship__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ship__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShipAccess().getAddressAssignment_7()); }
	(rule__Ship__AddressAssignment_7)
	{ after(grammarAccess.getShipAccess().getAddressAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Ship__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ship__Group_2__0__Impl
	rule__Ship__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ship__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShipAccess().getAndKeyword_2_0()); }
	' and '
	{ after(grammarAccess.getShipAccess().getAndKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ship__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ship__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ship__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShipAccess().getConditionsAssignment_2_1()); }
	(rule__Ship__ConditionsAssignment_2_1)
	{ after(grammarAccess.getShipAccess().getConditionsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__DeclarationsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getDeclarationsDeclarationParserRuleCall_0()); }
		ruleDeclaration
		{ after(grammarAccess.getModelAccess().getDeclarationsDeclarationParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ship__ConditionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShipAccess().getConditionsConditionParserRuleCall_1_0()); }
		ruleCondition
		{ after(grammarAccess.getShipAccess().getConditionsConditionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ship__ConditionsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShipAccess().getConditionsConditionParserRuleCall_2_1_0()); }
		ruleCondition
		{ after(grammarAccess.getShipAccess().getConditionsConditionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ship__ActionAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShipAccess().getActionActionParserRuleCall_4_0()); }
		ruleAction
		{ after(grammarAccess.getShipAccess().getActionActionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ship__ActionAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShipAccess().getActionItemParserRuleCall_5_0()); }
		ruleItem
		{ after(grammarAccess.getShipAccess().getActionItemParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ship__AddressAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShipAccess().getAddressAddressParserRuleCall_7_0()); }
		ruleAddress
		{ after(grammarAccess.getShipAccess().getAddressAddressParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getItemAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getItemAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Address__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddressAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getAddressAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getConditionAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getActionAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
